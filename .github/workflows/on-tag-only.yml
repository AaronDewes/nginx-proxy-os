name: Automatically Build image on tag ONLY
on:
    push:
        tags:
          - v[0-9]+.[0-9]+.[0-9]+
          - v[0-9]+.[0-9]+.[0-9]+-*

jobs:
    build:

        runs-on: ubuntu-20.04
        
        steps:
        
        - uses: actions/checkout@v1

        - name: Dependencies
          run: |
              sudo sed -i 's/focal/hirsute/g' /etc/apt/sources.list
              sudo apt update
              sudo apt -y dist-upgrade
              sudo apt install binfmt-support qemu-user-static quilt debootstrap

        - name: Set image name
          run: |
                UMBREL_OS_VERSION="$(git describe --tags)"
                IMAGE_NAME="umbrel-os-${UMBREL_OS_VERSION}"
                echo "UMBREL_OS_VERSION=$UMBREL_OS_VERSION"  >> $GITHUB_ENV
                echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

        - name: Run build script
          run: |
                echo "Building $IMAGE_NAME"
                sudo IMG_FILENAME=$IMAGE_NAME ZIP_FILENAME=$IMAGE_NAME UMBREL_OS_VERSION=$UMBREL_OS_VERSION ./build.sh

        - name: Copy ZIP to current working dir
          run: cp deploy/*.zip ./

        - name: Debug current working dir
          run: ls -la

        - name: Create release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: true
            prerelease: false

        - name: Upload image
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ${{ env.IMAGE_NAME }}.zip
            asset_name: ${{ env.IMAGE_NAME }}.zip
            asset_content_type: application/gzip
